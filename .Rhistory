mutate(
Target = as.numeric(Target)
)
# create a data bundle
AC_data_bundle <- ppt_prepare_data(AC_data, config)
refs <- AC_data_bundle %>% pull(Ref)
# read the master ppt template
template <- file.path(path, "Templates/ppt_template_07.pptx")
# create a new deck with data, and a powerpoint template file
slides <- ppt_new_deck(template, AC_data_bundle) %>%
#  ppt_include_escalation_only() %>%
ppt_nuhv1_title_slide(
slide_title = "Ambulatory Care",
sub_title = "February 2023"
) %>%
ppt_nuv1_3x3()%>%
ppt_nuhv1_at_a_glance(
slide_title = "At a Glance Summary"
,IPR_flag=TRUE
) %>%
ppt_nuhv1_spc_single("AC_106")%>%
ppt_nuhv1_spc_single("AC_107")%>%
ppt_nuhv1_spc_single("AC_102")%>%
ppt_nuhv1_spc_single("AC_109")%>%
ppt_nuhv1_four_spcs("AC_106","AC_107","AC_102","AC_109") %>%
ppt_nuhv1_four_spcs("AC_110","AC_43","AC_44","AC_46" ) %>%
ppt_nuhv1_four_spcs("AC_101","AC_48","AC_111","AC_49"  ) %>%
ppt_nuhv1_four_spcs("AC_112","AC_113","AC_58","AC_114"   )  %>%
ppt_nuhv1_four_spcs("AC_60","AC_64","AC_65","AC_67"  ) %>%
ppt_nuhv1_four_spcs("AC_68","AC_54","AC_55","AC_56" ) %>%
ppt_nuhv1_four_spcs("AC_75","AC_115","AC_72","AC_73") %>%
ppt_nuhv1_four_spcs("AC_116","AC_117","AC_118","AC_119" ) %>%
ppt_nuhv1_four_spcs("AC_120","AC_121","AC_122","AC_69" ) %>%
ppt_nuhv1_four_spcs("AC_125","AC_126","AC_126","AC_126" )
ppt_save_deck(slides,"C:/Users/marcos.fabietti/Documents/icontest2.pptx")
library(tidyverse)
library(readxl)
library(PPTautomation)
path <- "\\\\nuhcdata03\\data\\Information\\Performance & Reporting\\Regular Jobs\\Monthly\\R Performance Reports"
# read data from excel
AC_data <- read_xlsx(file.path(path, "Divisional_Operational/Data Files/Divisional Scorecard Data Rebased.xlsx"), sheet = "Ambulatory Care")
config <- read_xlsx(file.path(path, "Divisional_Operational/Data Files/Divisional Scorecard Data Rebased.xlsx"), sheet = "Meta2") %>%
mutate(
Target = as.numeric(Target)
)
# create a data bundle
AC_data_bundle <- ppt_prepare_data(AC_data, config)
refs <- AC_data_bundle %>% pull(Ref)
View(AC_data_bundle)
View(AC_data_bundle[[22]][[1]])
AC_data_bundle[[22]][[1]]
library(PPTautomation)
library(tidyverse)
library(readxl)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
library(tidyverse)
library(readxl)
library(PPTautomation)
path <- "\\\\nuhcdata03\\data\\Information\\Performance & Reporting\\Regular Jobs\\Monthly\\R Performance Reports"
# read data from excel
IPR_data <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data_marcos.xlsx"), sheet = "data")
config <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data_marcos.xlsx"), sheet = "config") %>%
mutate(
Target = as.numeric(Target)
)
# create a data bundle
IPR_data_bundle <- ppt_prepare_data(IPR_data, config)
IPR_data_bundle <-  filter(IPR_data_bundle, Board_Delegated %in% "B" )
#QD reference IDs
refs <- IPR_data_bundle %>% pull(Ref)
# read the master ppt template
template <- file.path(path, "Templates/ppt_template_07.pptx")
# create a new deck with data, and a powerpoint template file
slides <- ppt_new_deck(template, IPR_data_bundle) %>%
ppt_nuhv1_title_slide(
slide_title = "Quality dashboard",
sub_title = "June 2023"
) %>%
ppt_nuv1_3x3()%>%
ppt_nuhv1_at_a_glance(
slide_title = "IPR Scorecard"
) %>%
ppt_nuhv1_four_spcs("Pat_13","Pat_14","Pat_15","Pat_16") %>%
ppt_nuhv1_four_spcs("Pat_18","Pat_19","Pat_20","Pat_21") %>%
ppt_nuhv1_four_spcs("Perf_3","Perf_8","Perf_9","Perf_10")
ppt_save_deck(slides,"C:/Users/marcos.fabietti/Documents/test_M4_YTD.pptx")
library(tidyverse)
library(readxl)
library(PPTautomation)
path <- "\\\\nuhcdata03\\data\\Information\\Performance & Reporting\\Regular Jobs\\Monthly\\R Performance Reports"
# read data from excel
IPR_data <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "data")
config <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "config") %>%
mutate(
Target = as.numeric(Target)
)
# create a data bundle
IPR_data_bundle <- ppt_prepare_data(IPR_data, config)
IPR_data_bundle <-  filter(IPR_data_bundle, Board_Delegated %in% "B" )
#QD reference IDs
refs <- IPR_data_bundle %>% pull(Ref)
# read the master ppt template
template <- file.path(path, "Templates/ppt_template_07.pptx")
# create a new deck with data, and a powerpoint template file
slides <- ppt_new_deck(template, IPR_data_bundle) %>%
ppt_nuhv1_title_slide(
slide_title = "Quality dashboard",
sub_title = "June 2023"
) %>%
ppt_nuv1_3x3()%>%
ppt_nuhv1_at_a_glance(
slide_title = "IPR Scorecard"
) %>%
ppt_nuhv1_four_spcs("Pat_2","Pat_7","Pat_9","Pat_11") %>%
ppt_nuhv1_four_spcs("Pat_13","Pat_14","Pat_15","Pat_16") %>%
ppt_nuhv1_four_spcs("Pat_18","Pat_19","Pat_20","Pat_21") %>%
ppt_nuhv1_four_spcs("Pat_22","Pat_23","Pat_24","Pat_27") %>%
ppt_nuhv1_four_spcs("Pat_28","Pat_29","Pat_30","Pat_33") %>%
ppt_nuhv1_four_spcs("Pat_36","Pat_37","Pat_40","Pat_43") %>%
ppt_nuhv1_four_spcs("Pat_45","Pat_47","Pat_49","Perf_3") %>%
ppt_nuhv1_four_spcs("Perf_7","Perf_8","Perf_9","Perf_10") %>%
ppt_nuhv1_four_spcs("Perf_12","Perf_13","Perf_14","Perf_15") %>%
ppt_nuhv1_four_spcs("Perf_16","Perf_17","Perf_18","Perf_25") %>%
ppt_nuhv1_four_spcs("Perf_31","Perf_32","Perf_33","Perf_34") %>%
ppt_nuhv1_four_spcs("Perf_40","Perf_41","Perf_42","Pple_1")%>%
ppt_nuhv1_four_spcs("Pple_3","Pple_4","Pple_7","Pple_9") %>%
ppt_nuhv1_four_spcs("Pple_17","Pple_18","Pple_17","Pple_18") %>%
ppt_nuhv1_spc_single("Pple_3")
slides <- ppt_new_deck(template, IPR_data_bundle) %>%
ppt_nuhv1_title_slide(
slide_title = "Quality dashboard",
sub_title = "June 2023"
) %>%
ppt_nuv1_3x3()%>%
ppt_nuhv1_at_a_glance(
slide_title = "IPR Scorecard"
) %>%
ppt_nuhv1_four_spcs("Pat_13","Pat_14","Pat_15","Pat_16") %>%
ppt_nuhv1_four_spcs("Pat_18","Pat_19","Pat_20","Pat_21") %>%
ppt_nuhv1_four_spcs("Perf_3","Perf_8","Perf_9","Perf_10")
ppt_save_deck(slides,"C:/Users/marcos.fabietti/Documents/test_M5_YTD.pptx")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/pptautomation')
library(tidyverse)
library(readxl)
library(PPTautomation)
path <- "\\\\nuhcdata03\\data\\Information\\Performance & Reporting\\Regular Jobs\\Monthly\\R Performance Reports"
# read data from excel
IPR_data <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "data")
config <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "config") %>%
mutate(
Target = as.numeric(Target)
)
# create a data bundle
IPR_data_bundle <- ppt_prepare_data(IPR_data, config)
library(tidyverse)
library(readxl)
library(PPTautomation)
path <- "\\\\nuhcdata03\\data\\Information\\Performance & Reporting\\Regular Jobs\\Monthly\\R Performance Reports"
# read data from excel
IPR_data <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "data")
config <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "config") %>%
mutate(
Target = as.numeric(Target)
)
# create a data bundle
IPR_data_bundle <- ppt_prepare_data(IPR_data, config)
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/pptautomation')
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/pptautomation')
library(tidyverse)
library(readxl)
library(PPTautomation)
path <- "\\\\nuhcdata03\\data\\Information\\Performance & Reporting\\Regular Jobs\\Monthly\\R Performance Reports"
# read data from excel
IPR_data <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "data")
config <- read_xlsx(file.path(path, "IPR/Data_Files/IPR_data.xlsx"), sheet = "config") %>%
mutate(
Target = as.numeric(Target)
)
# create a data bundle
IPR_data_bundle <- ppt_prepare_data(IPR_data, config)
IPR_data_bundle <-  filter(IPR_data_bundle, Board_Delegated %in% "B" )
#QD reference IDs
refs <- IPR_data_bundle %>% pull(Ref)
# read the master ppt template
template <- file.path(path, "Templates/ppt_template_07.pptx")
# create a new deck with data, and a powerpoint template file
slides <- ppt_new_deck(template, IPR_data_bundle) %>%
ppt_nuhv1_title_slide(
slide_title = "Quality dashboard",
sub_title = "June 2023"
) %>%
ppt_nuv1_3x3()%>%
ppt_nuhv1_at_a_glance(
slide_title = "IPR Scorecard"
)
ppt_save_deck(slides,"C:/Users/marcos.fabietti/Documents/test_M5_YTD.pptx")
#warm up iterations defined by helen based on chart
d<-100
# total iterations
m<-1000
#constructing a vector of size m (example output)
Y<-runif(n=m, min=0, max=1)
Yhat<-mean(Y(m+1:))
Yhat<-mean(Y[d+1,:])
Yhat<-mean(Y[d+1,:])
Yhat<-mean(Y[d+1,])
Yhat<-mean(Y[d+1,m])
Yhat<-mean(Y(d+1,m))
Yhat<-Y[d+1,m]
Yhat<-Y[d+1:m]
len(Yhat)
length(Yhat)
Yhat<-Y[100:1000]
Yhat<-Y[100:m]
Yhat<-Y[d:m]
Yhat<-Y[1:d]
Yhat<-Y[d+1:m]
Yhat<-Y[101:m]
Y[101]
Y[d+1]
Yhat<-Y
Yhat<-Yhat[d+1:100]
Yhat<-Yhat[d+1:m]
Yhat<-copy(Y)
Yhat<-Y
d
d+1
Yhat<-Yhat[(d+1):m]
Yhat<-Y[(d+1):m]
rm(Yhat)
Yhat<-Y[(d+1):m]
Yhat<-mean(Y[(d+1):m])
Ysum2<-Y-Yhat
Y[1]
Y[1]-Yhat
Ysum2<-(Y-Yhat)^2
((m-d)^2)
Ysum2<-sum((Y-Yhat)^2)
MSER=Ysum2/((m-d)^2)
length(Y)
#warm up iterations defined by helen based on chart
d<-100
# total iterations
m<-length(Y)
#constructing a vector of size m (example output)
Y<-runif(n=m, min=0, max=1)
#get Ymean, from d+1 to m
Yhat<-mean(Y[(d+1):m])
#calculate squared sum
Ysum2<-sum((Y-Yhat)^2)
#MSER
MSER=Ysum2/((m-d)^2)
((m-d)^2)
(m-d)
#warm up iterations defined by helen based on chart
d<-100
#constructing a vector of size m (example output)
Y<-runif(n=1000, min=0, max=1)
# total iterations
m<-length(Y)
#Y outside warup
Y_ow<-Y[(d+1):m]
#get Ymean, from d+1 to m
Yhat<-mean(Y_ow)
#calculate squared sum
Ysum2<-sum((Y_ow-Yhat)^2)
#MSER
MSER=Ysum2/((m-d)^2)
devtools::document()
devtools::document()
package.install('devtools')
install.packages('devtools')
install.packages("devtools")
devtools::document()
library('devtools')
install.packages(devtools)
install.packages('devtools)
''
'
install.packages('devtools')
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library(NHSRplotthedots)
library(NHSRdatasets)
install.packages('NHSRplotthedots')
library(tidyverse)
library(NHSRplotthedots)
library(NHSRdatasets)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM"
)
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library(NHSRplotthedots)
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
icons_position='top right'
)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
icons_position='top right'
)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM"
)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
remove.packages('plotly')
install.packages(plotly)
install.packages('plotly')
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM"
)
plot_ly(x = ~rnorm(50), type = "histogram")
library(ggplot2)
library(plotly)
plot_ly(x = ~rnorm(50), type = "histogram")
packageVersion('plotly')
library(plotly)
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM"
)
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease")
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease", target=2000)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
target=2000
icons_position='outer'
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
target=2000,
icons_position='outer'
)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
target=2000,
icons_position='outer'
)
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease", target=2000)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
target=2000,
icons_position='outer'
)
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
library(NHSRplotthedots)
library(NHSRdatasets)
library(tidyverse)
sub_set <- ae_attendances %>%
filter(org_code == "RQM", type == 1, period < as.Date("2018-04-01"))
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease", target=2000)
sub_set %>%
ptd_spc(value_field = breaches, date_field = period, improvement_direction = "decrease") %>%
ptd_create_plotly(
y_axis_label = "4-hour wait breaches",
main_title = "SPC of A&E waiting time breaches for RQM",
target=2000,
icons_position='outer'
)
remove.packages("NHSRplotthedots")
library('devtools')
devtools::install('C:/Users/marcos.fabietti/Documents/GitHub/NHSRplotthedots_En')
remove.packages("NHSRplotthedots")
remove.packages("NHSRplotthedots")
remove.packages("NHSRplotthedots")
library (readr)
setwd("~/GitHub/pivot_in_r")
library(readr)
Daily_Household_Transactions <- read_csv("Daily Household Transactions.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y")))
View(Daily_Household_Transactions)
rm()
df<- read_csv("Daily Household Transactions.csv", col_types = cols(Date = col_date(format = "%m/%d/%Y")))
View(df)
unique(df.mode)
unique(df$Mode)
df<-df %>% select(Date, Mode, Amount)
library(dplyr)
df<-df %>% select(Date, Mode, Amount)
View(df)
df<-df %>% select(Date, Mode, Amount) %>% drop_na()
library(tidyr)
df<-df %>% select(Date, Mode, Amount) %>% drop_na()
View(df)
pivoted<-df %>% group_by(Mode) %>%
summarise(Freq = sum(Amount))
View(pivoted)
pivoted_with_dates<-df %>% group_by(c(Mode, month = lubridate::floor_date(Date, 'month'))) %>%
summarise(Freq = sum(Amount))
pivoted_with_dates<-df %>% group_by(Mode, month = lubridate::floor_date(Date, 'month')) %>%
summarise(Freq = sum(Amount))
View(pivoted_with_dates)
View(pivoted_with_dates)
pivoted_with_dates<-df %>% group_by(Mode, month = lubridate::floor_date(Date, 'year')) %>%
summarise(Freq = sum(Amount))
View(pivoted_with_dates)
View(pivoted_with_dates)
pivoted_with_dates_wider<-df %>% group_by(Mode, year = lubridate::floor_date(Date, 'year')) %>%
summarise(Freq = sum(Amount)) %>% pivot_wider(names_from = year,
values_from = Freq)
View(pivoted_with_dates_wider)
pivoted_with_dates_wider<-df %>% group_by(Mode, year = lubridate::floor_date(Date, 'year')) %>%
summarise(Freq = sum(Amount)) %>% pivot_wider(names_from = year,
values_from = Freq, values_fill = 0)
View(pivoted_with_dates_wider)
View(pivoted_with_dates_wider)
View(pivoted_with_dates)
